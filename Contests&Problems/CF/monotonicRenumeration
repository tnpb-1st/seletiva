// Problem: C. Monotonic Renumeration
// Contest: Codeforces - Topic Stream Mashup: Probability + Combinatorics
// URL: https://codeforces.com/gym/306143/problem/C
// Memory Limit: 256 MB
// Time Limit: 2000 ms
// 
// Powered by CP Editor (https://cpeditor.org)

/*
author: eiji_tnpb
*/
#include <bits/stdc++.h>
using namespace std;
#define endl '\n'
#define pb push_back
#define REP(idx,x) for(int i = idx; i<x; i++)
#define REPN(idx,x) for(int i = idx; i<=x; i++)
#define all(x) x.begin(),x.end()
#define pq priority_queue
typedef long long ll;
typedef vector<int> vi;
typedef vector<ll> vll;
typedef vector<vi> vvi;
typedef vector<vll> vvll;
typedef vector<bool> vbool;
typedef pair<int,int> pii;
typedef vector<pii> vpii;
typedef vector<vpii> vvpii;
const int INF = 0x3f3f3f3f;
const ll INFLL = 8e18;
const int mx = 1e6;
int dp[100001];
char M[100][100];
int R, C;
// N L O S NE SE SO NO
int dr[] = {-1, 0, 1, 0, 1, -1, -1, 1};
int dc[] = {0, 1, 0, -1, 1, 1, -1, -1};
ll const MOD = 998244353;

ll fastExpo(ll x, ll y)
{
	ll res = 1;
	while(y)
	{
		if(y & 1)
			res = (res * 1LL * (x % MOD)) % MOD;
		x = (1LL * (x % MOD) * (x % MOD)) % MOD;
		y >>= 1;
	}
	return res;
}

void solve()
{
	int N; cin >> N;
	vll A(N), G(N, 1);
	map<ll, vll> P;
	for(int i = 0; i < N; i++)
	{
		cin >> A[i];
		P[A[i]].pb(i);
	}
	int numGroups = 1, maxInd = P[A[0]].back();
	for(int i = 1; i < N; i++)
	{
		ll x = A[i];
		int xl = P[x].front(), xr = P[x].back();
		if(xl > maxInd)
		{
			maxInd = xr;
			numGroups++;
		} else {
		    maxInd = max(maxInd, xr);
		}
		G[i] = numGroups;
	}
	cout << fastExpo(2, numGroups - 1);
}

int main()
{
    cin.tie(0);
    ios::sync_with_stdio(0);
    // freopen("input.txt", "r", stdin);
    // freopen("output.txt", "w", stdout);
    solve();
    return 0;
}
